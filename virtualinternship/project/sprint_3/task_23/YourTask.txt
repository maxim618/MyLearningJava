Какие уровни тестирования вы знаете?

В процессе разработки программного обеспечения (ПО) обычно
используются различные уровни тестирования для обеспечения качества
и надежности продукта. Основные уровни тестирования ПО включают:

1. Модульное тестирование (Unit Testing): На этом уровне тестирования
проверяются отдельные модули или компоненты программного обеспечения.
Цель состоит в том, чтобы убедиться, что каждый отдельный модуль (класс)
работает правильно. Модульные тесты обычно пишутся разработчиками.

2. Интеграционное тестирование (Integration Testing): После модульного
тестирования следует интеграционное тестирование, на котором проверяется
взаимодействие между различными модулями (классами) или компонентами ПО.
Целью является обнаружение ошибок в интерфейсах и взаимодействии между
различными частями системы. Интеграционные тесты обычно пишутся разработчиками.

3. Системное тестирование (System Testing): На этом уровне тестируется
полная интегрированная система, чтобы убедиться, что она соответствует
определенным требованиям. Системное тестирование охватывает различные
аспекты, включая функциональные и нефункциональные требования.

4. Приемочное тестирование (Acceptance Testing): Этот уровень
тестирования часто проводится конечным пользователем или клиентом
для подтверждения, что система готова к производственному использованию
и соответствует их требованиям. Приемочное тестирование может включать
в себя бета-тестирование, на котором реальные пользователи используют
продукт в реальных условиях.

Эти уровни тестирования помогают обеспечить то, что ПО будет
работать должным образом на всех этапах его разработки и использования.
Каждый уровень тестирования предназначен для идентификации определенных
типов проблем, что позволяет команде разработки более эффективно
управлять качеством продукта.

Посмотрите лекцию про введение в юнит тестирование:
https://www.youtube.com/watch?v=aCUTTtXBP84

После внесённых нами изменений является ли класс
TravelCalculatePremiumServiceImplTest чистым юнит тестом?

class TravelCalculatePremiumServiceImplTest {

    private DateTimeService dateTimeService;
    private TravelCalculatePremiumServiceImpl service;

    @BeforeEach
    public void setUp() {
        dateTimeService = new DateTimeService();
        service = new TravelCalculatePremiumServiceImpl(dateTimeService);
    }

}

В такой редакции нет! Он создаёт и использует две инстанции продакшн
классов: DateTimeService и TravelCalculatePremiumServiceImpl. То есть
по сути этот тест проверяет интеграцию двух классов.

        dateTimeService = new DateTimeService();
        service = new TravelCalculatePremiumServiceImpl(dateTimeService);

Представьте себе, что бы было если DateTimeService в свою очередь
тоже зависел от других классов, и так далее. Нам бы пришлось создавать
много классов ради того, чтобы протестировать всего лишь код внутри
одного класса. Чистый юнит тест это тест, который подменяет внешние
зависимости мок объектами. Он даёт возможность тестировать код внутри
одного класса, управляя мок объектами во время тестирования.

Одной из самых популярных библиотек для создания мок объектов на
Java является библиотека Mockito.

Ваша задача: попробуйте узнать как с помощью Mockito создавать
мок объекты и использовать их при написании тестов.

Это факт, что в реальных проектах на работе нужно постоянно
изучать новые вещи. Это неотъемлемая часть работы хорошего
разработчика программного обеспечения.

Посмотрите на эту задачу, как на возможность самостоятельно
изучить новую тему и применить свои знания в реальном проекте.

В реальных проектах очень редко кто-то будет вам подробно
объяснять тему, которую вы не знаете.

Для изучения новой темы про мок объекты
в Java и библиотеку Mockito воспользуйтесь:
- ChatGPT;
- YouTube;
- Google Search;
- Books.

Изучив новую для вас тему самостоятельно вы получите огромную
уверенность в своих силах и плюс к карме!

Ваша задача заменить в тесте TravelCalculatePremiumServiceImplTest
создание инстанции объекта DateTimeService на создание мок объекта,
задать ему нужное поведение для успешного выполнения теста.

PS: если у вас не получится перевести тест на использование мок
объектов самостоятельно, то загляните в решение предлагаемое ментором.
Разберитесь в нём, если возникнут вопросы обязательно их задавайте!
Мок объекты и их применение для эффективного написания юнит тестов
очень важный инструмент, который мы будем часто применять в нашем проекте.

Best books about JUnit and Testing (в интернете можно найти pdf):
1. https://www.amazon.com/Pragmatic-Unit-Testing-Java-JUnit/dp/0974514012
2. https://www.amazon.com/Test-Driven-Acceptance-Java-Developers/dp/1932394850
3. https://www.amazon.com/JUnit-Action-Second-Edition-Tahchiev/dp/1935182021
4. https://www.amazon.com/Effective-Unit-Testing-guide-developers/dp/1935182579
5. https://www.amazon.com/Practical-Unit-Testing-JUnit-Mockito/dp/8393489393

PS: не забудьте по окончанию выполнения шага создать и заполнить
файл /documentation/Task_x_description.txt. Формат заполнения этого
файла описан в task_1 в файле Learning_reflection.txt.

#### Доступ к закрытой части курса, поддержка, вопросы и обратная связь по проекту:
* [Телеграмм группа проекта](https://t.me/+mvRhG9YECTlkZjQ0)
* [Телеграмм автора курса] (javaguruby)
* [Емейл автора курса] (itguruby@mail.ru)
