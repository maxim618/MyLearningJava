Программа проекта Виртуальная Стажировка Java

task_0 - Легенда проекта
task_1 - Знакомство с Build Tool Gradle, настройка проекта
task_2 - Сборка проекта, команда gradle build, Gradle wrapper
task_3 - Сборка проекта из терминала (./gradlew build)
task_4 - Maven структура проекта
task_5 - Артефакты сборки проекта
task_6 - Команда gradle clean
task_7 - Запуск приложения
task_8 - Знакомство с файлом .gitignore
task_9 - Знакомство с файлами build.gradle и settings.gradle
task_10 - Пишем первый код: создаём конструктор класса и get/set методы

task_11 - Команда Git pull
task_12 - Используем конструктор класса и set методы для заполнения полей ответа
task_13 - Пишем первый юнит тест
task_14 - "Идеальный" тест это тест в котором есть всего одна проверка!
task_15 - Попробуем ChatGPT для генерации тестов!
task_16 - Почему деньги не хранят в переменных типа float или double?
task_17 - Реализация первой формулы расчета стоимости страхового полиса
task_18 - Рефакторинг первой формулы расчета стоимости страхового полиса
task_19 - Класс это как крепость для алгоритма, выносим формулу расчета в отдельный класс
task_20 - Знакомство с понятием stateless и stateful объектов

task_20_code_review - Первое код ревью вашего кода!

task_21 - Изучаем дизайн паттерн Inversion of Control (IoC)
task_22 - Немного философии: как вы относитесь к результатам своего труда?
task_23 - Какие уровни тестирования вы знаете?
task_24 - IoC и три способа получения внешних зависимостей
task_25 - Введение в Mockito: аннотации @Mock и @InjectMocks
task_26 - Библиотека Lombok
task_27 - Применяем Lombok для генерации конструктора
task_28 - Прототип валидации входных данных
task_29 - Первые юнит тесты логики валидации данных
task_30 - Реализуем валидацию: запрос без фамилии должен считаться не валидным

task_31 - Реализуем валидацию: запрос без даты начала поездки должен считаться не валидным
task_32 - Реализуем валидацию: запрос без даты окончания поездки должен считаться не валидным
task_33 - Диалог с ментором об альтернативных решениях
task_34 - Реализуем валидацию: дата окончания поездки должна быть после даты начала
task_35 - Правило бойскаутов
task_36 - Хорошее техническое решение должно быть похоже на бизнес процесс
task_37 - Знакомимся с компьютерными сетями
task_38 - Знакомимся с протоколом HTTP
task_39 - Знакомимся с REST
task_40 - Знакомимся с программой Postman

task_40_code_review - Второе код ревью вашего кода!

task_41 - JSON работа с форматом даты
task_42 - JSON работа с форматом даты
task_43 - Continues Integration (CI) процесс
task_44 - Знакомство с принципом разработки KISS
task_45 - Изучение предложенного ментором подхода к написанию тестов на контроллер
task_46 - Составление списка тестовых сценариев
task_47 - Дополнение списка тестовых сценариев конкретными тестовыми данными
task_48 - Написание тестов на контроллер по ранее подготовленному списку тестовых сценариев
task_49 - Переносим запросы и ответы в отдельные JSON файлы в папке тестовых ресурсов
task_50 - Читаем JSON файлы из папки тестовых ресурсов.

task_51 - Применяем аннотацию @Component в тестах
task_52 - Сравнение ответов в виде JSON документов
task_53 - Рефакторим тесты, избавляемся от дупликации кода!
task_54 - Исправляем найденную тестировщиком ошибку
task_55 - Ты хочешь стать разработчиком сеньор уровня? Тогда давай поговорим о том, что для этого надо делать.
task_56 - Генерим идеи по улучшению кода валидации запроса
task_57 - Выносим валидации в отдельные классы и прячем их в отдельном пакете
task_58 - Делаем для всех классов валидаций общий интерфейс
task_59 - Создаем единую точку входа для подсистемы валидации
task_60 - Изучаем информацию о системе логирования в Java приложениях

task_60_code_review - Третье код ревью вашего кода!

task_61 - Начальная конфигурация Logback
task_62 - Логирование REST запроса в формате JSON
task_63 - Логирование REST ответа в формате JSON
task_64 - Замер и логирование времени выполнения запроса
task_65 - Сохранение логов в файл
task_66 - Добавляем и конфигурируем новый file appender
task_67 - Знакомство с бизнес описание формулы расчета страховой премии
task_68 - Анализ расчета стоимости медицинского риска
task_69 - Составление своего плана реализации для расчета стоимости медицинского риска
task_70 - Сравнение своего плана реализации с планом предлагаемым ментором

task_71 - Установка на локальный компьютер MySQL Community Server
task_72 - Мини курс по SQL
task_73 - Начальный скрипт по созданию базы данных
task_74 - Создание SQL скрипта по заполнению таблиц начальными значениями
task_75 - Добавление новых полей в REST запрос
task_76 - Валидация на основе данных из базы данных
task_77 - Решение для сравнения контента JSON строк без учёта порядка расположения элементов
task_78 - Вынесение кодов ошибок в отдельный файл errorCodes.properties
task_79 - Знакомство с принципом DRY
task_80 - Дизайн паттерн Factory

task_80_code_review - Четвертое код ревью вашего кода!

task_81 - Почему в Java классы делят на пакеты? По какому принципу это делают?
task_82 - Создание отдельного пакета для вспомогательных классов
task_83 - Создание пакетов core.services и core.underwriting
task_84 - Причины по которым разработчики могут выбрать ограничение доступа к классам package level access
task_85 - Подключение приложения к реляционной базе данных
task_86 - H2 in-memory база данных
task_87 - JPA конфигурация
task_88 - Доменная модель и JPA маппинг
task_89 - Spring JPA репозитории
task_90 - Рефакторинг тестов, удаляем дублирование кода

task_91 - Параметризация тестов
task_92 - Дорабатываем интерфейсы валидации под новые требования
task_93 - Рефакторинг кода валидации
task_94 - Реализация placeholder для сообщения об ошибках
task_95 - Валидация кодов рисков из REST запроса
task_96 - Генерация идей для реализации формул расчета стоимости рисков
task_97 - Создание интерфейса для реализации формул расчета стоимости рисков
task_98 - Изменяем формат ответа
task_99 - Учимся задавать вопросы для прояснения бизнес требований
task_100 - Генерируем идеи для заполнения REST ответа данными

task_100_code_review - Пятое код ревью вашего кода!

task_101 - Что такое immutable (не изменяемые) классы и для чего их используют
task_102 - Java record
task_103 - Делим код бизнес логики на под пакеты
task_104 - Рефакторинг по вынесению кода расчета стоимости каждого риска в отдельный класс
task_105 - План реализации формулы расчета коэффициента CountryDefaultDayPremium
task_106 - Добавляем поле country в REST запрос
task_107 - Создаем новую таблицу в базе данных для хранения дефолтных коэффициентов по странам
task_108 - Создаем JPA маппинг для новой таблицы
task_109 - Задаём четкий формат для полей типа BigDecimal в REST ответе
task_110 - Придумываем подробный план реализации AgeCoefficient и обсуждаем его с ментором

task_111 - Добавляем в запрос дату рождения человека
task_112 - Добавляем валидацию на дату рождения человека
task_113 - Добавяем в базу данных коэффициент возраста человека
task_114 - Добавяем в формулу расчета медицинского риска коэффициент возраста человека
task_115 - Рефакторинг формулы расчета медицинского риска
task_116 - Придумываем варианты реализации switch on/off (включалку/выключалку) для нового коэффициента
task_117 - Работа над реализацией лимита выплат по медицинскому риску
task_118 - Работа над реализацией лимита выплат по медицинскому риску
task_119 - Работа над реализацией лимита выплат по медицинскому риску
task_120 - Работа над реализацией лимита выплат по медицинскому риску

task_120_code_review - Шестое код ревью вашего кода!

task_121 - Работа над реализацией лимита выплат по медицинскому риску
task_122 - Реализация включалки/выключалки для AgeCoefficient
task_123 - Знакомство с современными Дата Центрами
task_124 - Разобраться в разных деплоймент артефактах: Thin Jar, Fat Jar, Thin War, Fat War
task_125 - Знакомство с семантическими правилами версионирования
task_126 - Локальный Maven репозиторий
task_127 - Исправление первого бага с прода
task_128 - Генерация идей улучшения проекта
task_129 - Улучшение тестов REST контроллера
task_130 - Исправление второго бага с прода

task_131 - Внедряем в приложение поддержку Liquibase
task_132 - Изучаем основы создания веб страницы (Thymeleaf, URL, HTML)
task_133 - Используем H2 базу данных для тестов
task_134 - Новые требования от бизнеса: полис страхования для нескольких персон
task_135 - Разработка нового формата REST запроса и ответа
task_136 - Разделение валидаций по доменному принципу
task_137 - Создание DTO для REST запроса и ответа новой версии
task_138 - Рефакторинг кода: перенос классов в пакеты где они используются
task_139 - Изучаем Hexagonal Architecture
task_140 - Применяем Hexagonal Architecture на практике

task_140_code_review - Седьмое код ревью вашего кода!

task_141 - Применяем Hexagonal Architecture на практике
task_142 - Применяем Hexagonal Architecture на практике
task_143 - Применяем Hexagonal Architecture на практике
task_144 - Применяем Hexagonal Architecture на практике
task_145 - Рефакторинг кода валидации, разделение по доменным объектам
task_146 - Применяем Hexagonal Architecture на практике
task_147 - Применяем Hexagonal Architecture на практике
task_148 - Применяем Hexagonal Architecture на практике
task_149 - Применяем Hexagonal Architecture на практике
task_150 - Как тесты помогают писать качественный код?

task_151 - Применяем Hexagonal Architecture на практике
task_152 - Применяем Hexagonal Architecture на практике
task_153 - Реализация второй версии веб UI
task_154 - Фикс бага после тестирования
task_155 - Создание новых тестов для второй версии API
task_156 - Фикс ошибок обнаруженных при тестировании
task_157 - Фикс ошибок обнаруженных при тестировании
task_158 - Дизайн паттерн Builder
task_159 - Дизайн паттерн Builder
task_160 - Дизайн паттерн Builder

task_160_code_review - Восьмое код ревью вашего кода!

task_161 - Применение дизайн паттерна Builder в тестах
task_162 - Добавление персонального кода в REST запросы
task_163 - Реализация второй версии web для приложения
task_164 - Сохранение данных в базу данных
task_165 - Сохранение данных в базу данных
task_166 - Сохранение данных в базу данных
task_167 - Сохранение данных в базу данных
task_168 - Сохранение данных в базу данных
task_169 - ACID (Atomicity, Consistency, Isolation, Durability)
task_170 - Используем транзакции

task_171 - Создание документации для REST API
task_172 - Не возвращать null поля в REST ответе
task_173 - Разработка внутреннего REST API
task_174 - Добавление уникального идентификатора (UUID)
task_175 - Добавление уникального идентификатора (UUID)
task_176 - Разработка внутреннего REST API
task_177 - Разработка внутреннего REST API
task_178 - Разработка внутреннего REST API
task_179 - Разработка внутреннего REST API
task_180 - Добавляем в систему новые типы рисков

task_180_code_review - Девятое код ревью вашего кода!

task_181 - Разработать план реализации риска отмены поездки
task_182 - Реализация риска отмены поездки
task_183 - Реализация риска отмены поездки
task_184 - Удаляем логи приложения при выполнении команды build clean
task_185 - Реализация риска отмены поездки
task_186 - Реализация риска отмены поездки
task_187 - Реализация риска отмены поездки
task_188 - Реализация риска отмены поездки
task_189 - Реализация риска отмены поездки
task_190 - Реализация риска отмены поездки

task_191 - Реализация риска отмены поездки
task_192 - Работа над улучшением acceptance тестов
task_193 - Работа над улучшением acceptance тестов
task_194 - Работа над улучшением acceptance тестов
task_195 - Работа над улучшением acceptance тестов
task_196 - Работа над улучшением acceptance тестов
task_197 - Работа над улучшением acceptance тестов
task_198 - Load Testing (нагрузочное тестирование)
task_199 - Load Testing (нагрузочное тестирование)
task_200 - Load Testing (нагрузочное тестирование)

task_200_code_review - Десятое код ревью вашего кода!

task_201 - Load Testing (нагрузочное тестирование)
task_202 - Load Testing (нагрузочное тестирование)
task_203 - Load Testing (нагрузочное тестирование)
task_204 - Load Testing (нагрузочное тестирование)
task_205 - Кеширование запросов в базу данных
task_206 - Применяем Lombok билдеры
task_207 - Создание background джоба
task_208 - Создание background джоба
task_209 - Обсуждение проблем работы с большими данными
task_210 - Создание background джоба

task_211 - Создание background джоба
task_212 - Создание background джоба
task_213 - Применение многопоточности для ускорения работы background джоба
task_214 - Применение многопоточности для ускорения работы background джоба
task_215 - Оптимизация работы background джоба
task_216 - Оптимизация работы background джоба
task_217 - Проверка формата персонального кода
task_218 - Проверка формата имени и фамилии
task_219 - Автоматическая установка даты начала полиса на UI
task_220 - Добавляем кнопку Очистка всех полей на UI

task_220_code_review - Одиннадцатое код ревью вашего кода!

task_221 - Валидации jakarta.validation API
task_222 - Введение в микро сервисы
task_223 - Визуализация архитектуры при помощи модели C4
task_224 - Изучение 12 factor application
task_225 - Установка Docker Desktop
task_226 - Создание Docker image
task_227 - Команды управления контейнером
task_228 - Открытие портов для доступа к контейнеру
task_229 - Логи приложения поднятого в Docker контейнере
task_230 - Фикс background джоба для работы в контейнере

task_231 - Статический анализ кода (checkstyle)
task_232 - Поднятие базы данных MySQl в Docker контейнере
task_233 - Поднятие базы данных MySQl в Docker контейнере
task_234 - Docker, учимся работать с сетью!
task_235 - Docker, запускаем два контейнера в одной сети!
task_236 - Учимся использовать Spring Profiles!
task_237 - Spring Default Profile
task_238 - Последовательность выполнения Gradle задач и зависимости между ними
task_239 - Внедряем Docker compose!
task_240 - Внедряем скрипт wait-for-it.sh!

task_240_code_review - Двенадцатое код ревью вашего кода!

task_241 - Асинхронная интеграция приложений
task_242 - Выбор брокера сообщений
task_243 - Отправка сообщений в RabbitMQ
task_244 - Отправка сообщений в RabbitMQ
task_245 - Автоматическое создание очереди в RabbitMQ
task_246 - Создаем новый микро сервис с нуля
task_247 - Учимся забирать сообщения из RabbitMQ
task_248 - Понимаем суть асинхронной интеграции приложений
task_249 - Учимся использовать Docker volumes
task_250 - Генерация pdf файлов

task_251 - Знакомство с Dead Letter Queue и повторной обработкой сообщений
task_252 - Генерация pdf файлов
task_253 - Генерация pdf файлов
task_254 - Генерация pdf файлов
task_255 - Формирование требований к новому микро сервису (BlackList)
task_256 - Реализация нового микро сервиса (BlackList)
task_257 - Реализация нового микро сервиса (BlackList)
task_258 - Реализация нового микро сервиса (BlackList)
task_259 - Реализация нового микро сервиса (BlackList)
task_260 - Реализация нового микро сервиса (BlackList)

task_260_code_review - Тринадцатое код ревью вашего кода!

task_261 - Синхронная интеграция микро сервисов
task_262 - Тестируем синхронную интеграцию микро сервисов
task_263 - Идеи развития проекта
